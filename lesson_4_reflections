1-Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

I prefer commit the changes manually rather than automatically because maybe the new changes or  commits are not correct or I
are just partially complete so if github  pull  from the remote repository that could cause me some confussion when
I am working locally on my own changes


2-Describe the differences between forks, clones, and branches. When would you use one instead of another?


A clone is simply a copy of a repository. On the surface, its result is equivalent to svn checkout,
where you download source code from some other repository. 
The difference between centralized VCS like Subversion and DVCSs like Git is that in Git,
when you clone, you are actually copying the entire source repository, including all the history and branches. 
You now have a new repository on your machine and any commits you make go into that repository. 
Nobody will see any changes until you push those commits to another repository (or the original one) or
until someone pulls commits from your repository, if it is publicly accessible.

A branch is something that is within a repository. Conceptually, it represents a thread of development. 
You usually have a master branch, but you may also have a branch where you are working on some feature xyz,
and another one to fix bug abc. When you have checked out a branch, any commits you make will stay on that branch
and not be shared with other branches until you merge them with or rebase them onto the branch in question.
Of course, Git seems a little weird when it comes to branches until you look at the underlying model of how branches
are implemented. Rather than explain it myself (I've already said too much, methinks),
I'll link to the "computer science" explanation of how Git models branches and commits, taken from the Git website:

http://eagain.net/articles/git-for-computer-scientists/

Git hub uses "fork" as fork is meant. It's a new repository stored on github, separate from the original. However,
github also makes it very simple to implement pull requests. Pull requests essentially ask the owner of the original
repository to "pull" the changes from your fork of the repo back into the origin. That way, everyone can use source
control and have a history of all the changes, including theirs, but not everyone needs write access to the original repo.
â€“ mklauber Mar 16 '12 at 19:31


3-What is the benefit of having a copy of the last known state of the remote stored locally?


4-How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Git and github is much easier collaborate because is an organized process where you can change, review and aprove any changes 
requested without afect the original project and once that is  ready you can merge those changes to the master branch of your project.
